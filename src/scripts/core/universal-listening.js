// ===== UNIVERSAL LISTENING SYSTEM - VERS√ÉO CORRIGIDA =====
// üìÅ Arquivo: src/scripts/core/universal-listening.js
// üîß SOLU√á√ïES: Timing fix + Quest√µes garantidas + Debug melhorado

(function() {
    'use strict';
    
    console.log('üéì Universal Listening System v2.0 carregando...');
    
    // ===== UNIVERSAL PROGRESS SYSTEM =====
    class UniversalStudentProgress {
        constructor() {
            this.studentId = sessionStorage.getItem('studentUsername') || 'student';
            this.progressKey = `progress_${this.studentId}`;
            this.init();
        }

        init() {
            console.log('üìä Inicializando sistema de progresso para:', this.studentId);
            this.loadProgress();
            this.ensureAllStructures();
        }

        loadProgress() {
            const saved = localStorage.getItem(this.progressKey);
            if (saved) {
                try {
                    this.data = JSON.parse(saved);
                    console.log('‚úÖ Progresso existente carregado');
                } catch (e) {
                    console.error('‚ùå Erro ao ler progresso:', e);
                    this.data = {};
                }
            } else {
                this.data = {};
                console.log('üÜï Criando novo progresso');
            }
        }

        ensureAllStructures() {
            let updated = false;

            // ===== LISTENING BASE =====
            if (!this.data.listening) {
                this.data.listening = {
                    lessonsCompleted: [],
                    bestScores: {},
                    badges: [],
                    lastAccessed: Date.now()
                };
                updated = true;
            }

            // ===== ESTRUTURAS POR N√çVEL =====
            const levels = ['foundation', 'beginner', 'intermediate', 'advanced'];
            levels.forEach(level => {
                const key = `${level}Lessons`;
                if (!this.data.listening[key]) {
                    this.data.listening[key] = {
                        completed: [],
                        scores: {},
                        badges: []
                    };
                    updated = true;
                }
            });

            // ===== ADVANCED (formato especial) =====
            if (!this.data.listening.advancedLessons) {
                this.data.listening.advancedLessons = {
                    completed: [],
                    scores: {},
                    badges: []
                };
                updated = true;
            }

            // ===== OUTRAS SE√á√ïES =====
            const sections = ['reading', 'roommate', 'neighbor'];
            sections.forEach(section => {
                if (!this.data[section]) {
                    this.data[section] = {
                        chaptersCompleted: [],
                        bestScores: {},
                        badges: [],
                        lastAccessed: Date.now()
                    };
                    updated = true;
                }
            });

            // ===== CAMPOS GLOBAIS =====
            if (!this.data.globalBadges) {
                this.data.globalBadges = [];
                updated = true;
            }

            if (!this.data.totalStudyTime) {
                this.data.totalStudyTime = 0;
                updated = true;
            }

            if (updated) {
                this.saveProgress();
                console.log('‚úÖ Estruturas criadas/atualizadas');
            }
        }

        saveProgress() {
            try {
                localStorage.setItem(this.progressKey, JSON.stringify(this.data));
                console.log('üíæ Progresso salvo');
            } catch (e) {
                console.error('‚ùå Erro ao salvar:', e);
            }
        }

        // ===== COMPLETAR LI√á√ÉO - M√âTODO UNIVERSAL =====
        completeListeningLesson(level, lessonNumber, score, timeSpent = 0) {
            console.log(`üéØ Salvando: ${level} li√ß√£o ${lessonNumber}, pontua√ß√£o: ${score}`);

            // Lista geral
            const generalLessonId = `${level}_lesson_${lessonNumber}`;
            
            if (!this.data.listening.lessonsCompleted.includes(generalLessonId)) {
                this.data.listening.lessonsCompleted.push(generalLessonId);
            }
            
            this.data.listening.bestScores[generalLessonId] = Math.max(
                this.data.listening.bestScores[generalLessonId] || 0, 
                score
            );
            
            // Estrutura espec√≠fica do n√≠vel
            const levelKey = `${level}Lessons`;
            if (this.data.listening[levelKey]) {
                const levelLessonId = `lesson_${lessonNumber}`;
                
                if (!this.data.listening[levelKey].completed.includes(levelLessonId)) {
                    this.data.listening[levelKey].completed.push(levelLessonId);
                }
                
                this.data.listening[levelKey].scores[levelLessonId] = Math.max(
                    this.data.listening[levelKey].scores[levelLessonId] || 0,
                    score
                );
            }

            // Caso especial advanced
            if (level === 'advanced') {
                const advancedLessonId = `advanced_${lessonNumber}`;
                if (!this.data.listening.advancedLessons.completed.includes(advancedLessonId)) {
                    this.data.listening.advancedLessons.completed.push(advancedLessonId);
                }
                this.data.listening.advancedLessons.scores[advancedLessonId] = Math.max(
                    this.data.listening.advancedLessons.scores[advancedLessonId] || 0,
                    score
                );
            }
            
            // Tempo e badges
            this.data.totalStudyTime += timeSpent;
            this.checkListeningBadges(level, lessonNumber, score);
            
            this.saveProgress();
            this.triggerUpdate();
            
            console.log(`‚úÖ Li√ß√£o salva: ${generalLessonId}`);
        }

        checkListeningBadges(level, lessonNumber, score) {
            const badges = this.data.listening.badges;
            
            // Primeira li√ß√£o
            if (!badges.includes('first_listening_lesson')) {
                badges.push('first_listening_lesson');
                this.showBadge('üéØ Primeira Li√ß√£o!', 'Listening desbloqueado!');
            }
            
            // Pontua√ß√£o perfeita
            if (score === 5 && !badges.includes('perfect_listening_lesson')) {
                badges.push('perfect_listening_lesson');
                this.showBadge('üèÜ Pontua√ß√£o Perfeita!', 'Excelente trabalho!');
            }
            
            // Master do n√≠vel
            const levelBadgeId = `${level}_master`;
            const levelCompleted = this.data.listening.lessonsCompleted.filter(l => l.startsWith(level)).length;
            
            if (levelCompleted >= 3 && !badges.includes(levelBadgeId)) {
                badges.push(levelBadgeId);
                this.showBadge(`üî• ${level.charAt(0).toUpperCase() + level.slice(1)} Master!`, `N√≠vel ${level} dominado!`);
            }
        }

        showBadge(title, message) {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                background: linear-gradient(45deg, var(--blue-dark), var(--blue-medium)); 
                color: white; padding: 25px 35px; border-radius: 20px; z-index: 10000; 
                text-align: center; box-shadow: 0 15px 40px rgba(0,0,0,0.3);
                animation: badgeShow 3s ease-in-out forwards;
            `;
            notification.innerHTML = `
                <div style="font-size: 1.8em; font-weight: bold; margin-bottom: 15px;">${title}</div>
                <div style="font-size: 1.1em;">${message}</div>
            `;
            document.body.appendChild(notification);
            setTimeout(() => { 
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification); 
                }
            }, 3000);
        }

        triggerUpdate() {
            // Atualiza cards se fun√ß√£o existir
            if (typeof window.updateLessonCards === 'function') {
                window.updateLessonCards();
            }
            
            // Evento para dashboard
            window.dispatchEvent(new CustomEvent('progressUpdated', { 
                detail: { section: 'listening', data: this.data } 
            }));
        }

        // ===== DEBUG =====
        debugProgress() {
            console.log('üîç DEBUG PROGRESSO:');
            console.log('Aluno:', this.studentId);
            console.log('Dados:', this.data);
            console.log('Li√ß√µes Listening:', this.data.listening?.lessonsCompleted || []);
            return this.data;
        }
    }

    // ===== üîß VERIFICAR QUEST√ïES - MELHORADO =====
    function ensureQuestionsLoad(questionsData, currentLesson) {
        console.log(`üîç Verificando quest√µes para li√ß√£o: ${currentLesson}`);
        
        if (!questionsData) {
            console.error('‚ùå ERRO: Dados de quest√µes n√£o encontrados!');
            console.log('üîç Tentando detectar quest√µes globais...');
            
            // üîß TENTATIVA DE RECUPERA√á√ÉO
            const globalQuestions = [
                'foundationLessons', 
                'beginnerLessons', 
                'intermediateLessons', 
                'advancedLessons'
            ];
            
            for (const varName of globalQuestions) {
                if (window[varName]) {
                    console.log(`‚úÖ Quest√µes encontradas em: ${varName}`);
                    questionsData = window[varName];
                    break;
                }
            }
            
            if (!questionsData) {
                console.error('‚ùå ERRO CR√çTICO: Nenhuma quest√£o encontrada!');
                return false;
            }
        }
        
        if (!questionsData[currentLesson]) {
            console.error(`‚ùå ERRO: Li√ß√£o ${currentLesson} n√£o existe!`);
            console.log('üìã Li√ß√µes dispon√≠veis:', Object.keys(questionsData));
            return false;
        }
        
        if (!questionsData[currentLesson].questions) {
            console.error(`‚ùå ERRO: Quest√µes da li√ß√£o ${currentLesson} n√£o encontradas!`);
            return false;
        }
        
        console.log(`‚úÖ Quest√µes verificadas para li√ß√£o ${currentLesson}`);
        return true;
    }

    // ===== üîß INICIALIZAR SISTEMA - MELHORADO =====
    function initializeUniversalListening(levelName, questionsData = null) {
        console.log(`üéß Inicializando sistema para: ${levelName}`);
        
        // 1. Verificar login
        if (sessionStorage.getItem('studentLoggedIn') !== 'true') {
            console.error('‚ùå Usu√°rio n√£o logado');
            window.location.href = '../auth/login.html';
            return false;
        }
        
        // 2. Criar sistema de progresso
        if (!window.studentProgress) {
            window.studentProgress = new UniversalStudentProgress();
        }
        
        // 3. üîß BUSCAR QUEST√ïES SE N√ÉO FORNECIDAS
        if (!questionsData) {
            console.log('‚è≥ Quest√µes n√£o fornecidas, buscando automaticamente...');
            const possibleVars = [
                'foundationLessons', 
                'beginnerLessons', 
                'intermediateLessons', 
                'advancedLessons'
            ];
            
            for (const varName of possibleVars) {
                if (window[varName]) {
                    questionsData = window[varName];
                    console.log(`‚úÖ Quest√µes encontradas: ${varName}`);
                    break;
                }
            }
        }
        
        // 4. Verificar quest√µes
        if (!questionsData) {
            console.error('‚ùå ERRO: Sem dados de quest√µes!');
            
            // üîß RETRY COM DELAY
            setTimeout(() => {
                console.log('üîÑ Tentativa de retry...');
                initializeUniversalListening(levelName, null);
            }, 1000);
            return false;
        }
        
        // 5. Atualizar info do usu√°rio
        const studentName = sessionStorage.getItem('studentUsername') || 'Student';
        const userNameEl = document.getElementById('userName') || document.querySelector('[data-user-name]');
        const userAvatarEl = document.getElementById('userAvatar') || document.querySelector('[data-user-avatar]');
        
        if (userNameEl) {
            userNameEl.textContent = studentName.charAt(0).toUpperCase() + studentName.slice(1).toLowerCase();
        }
        if (userAvatarEl) {
            userAvatarEl.textContent = studentName.charAt(0).toUpperCase();
        }
        
        console.log(`‚úÖ Sistema inicializado para ${levelName}`);
        console.log(`üë§ Aluno: ${studentName}`);
        console.log(`üìä Quest√µes: ${Object.keys(questionsData).length} li√ß√µes`);
        
        return true;
    }

    // ===== üîß AUTO-INICIALIZA√á√ÉO - MELHORADA =====
    function smartAutoStart() {
        // Detecta qual p√°gina est√° carregando
        const path = window.location.pathname;
        let levelName = 'unknown';
        
        if (path.includes('foundation.html')) levelName = 'foundation';
        else if (path.includes('beginner.html')) levelName = 'beginner';
        else if (path.includes('intermediate.html')) levelName = 'intermediate';
        else if (path.includes('advanced.html')) levelName = 'advanced';
        
        console.log(`üîç P√°gina detectada: ${levelName} (${path})`);
        
        // S√≥ inicializa em p√°ginas listening
        if (levelName === 'unknown') {
            console.log('‚ùå N√£o √© uma p√°gina de listening, saindo...');
            return;
        }
        
        // üîß SISTEMA DE RETRY INTELIGENTE
        let attempts = 0;
        const maxAttempts = 5;
        
        function tryInitialization() {
            attempts++;
            console.log(`üîÑ Tentativa ${attempts}/${maxAttempts} de inicializa√ß√£o...`);
            
            // Busca dados de quest√µes
            const possibleQuestionsVars = [
                'foundationLessons', 
                'beginnerLessons', 
                'intermediateLessons', 
                'advancedLessons'
            ];
            
            let questionsData = null;
            for (const varName of possibleQuestionsVars) {
                if (window[varName]) {
                    questionsData = window[varName];
                    console.log(`‚úÖ Quest√µes encontradas: ${varName}`);
                    break;
                }
            }
            
            if (questionsData) {
                // ‚úÖ SUCESSO
                console.log('üéØ Inicializando sistema...');
                const success = initializeUniversalListening(levelName, questionsData);
                
                if (success) {
                    console.log('üéâ Sistema inicializado com sucesso!');
                    
                    // Dispara evento de sistema pronto
                    window.dispatchEvent(new CustomEvent('universalListeningReady', {
                        detail: { level: levelName, questions: questionsData }
                    }));
                } else {
                    console.error('‚ùå Falha na inicializa√ß√£o');
                }
            } else {
                // ‚ùå RETRY
                if (attempts < maxAttempts) {
                    console.log(`‚è≥ Quest√µes n√£o encontradas, retry em ${attempts * 500}ms...`);
                    setTimeout(tryInitialization, attempts * 500);
                } else {
                    console.error('‚ùå ERRO: Quest√µes n√£o encontradas ap√≥s todas as tentativas!');
                    
                    // üîß FALLBACK: Tentar for√ßar carregamento
                    setTimeout(() => {
                        const stillNoQuestions = !window.foundationLessons && !window.beginnerLessons && 
                                                !window.intermediateLessons && !window.advancedLessons;
                        
                        if (stillNoQuestions) {
                            alert('‚ö†Ô∏è Erro ao carregar as quest√µes.\n\nPor favor, recarregue a p√°gina.\n\nSe o problema persistir, limpe o cache do navegador.');
                        } else {
                            console.log('üîÑ Quest√µes carregadas tardiamente, tentando novamente...');
                            tryInitialization();
                        }
                    }, 2000);
                }
            }
        }
        
        // Inicia tentativas
        tryInitialization();
    }

    // ===== FUN√á√ïES GLOBAIS =====
    window.UniversalStudentProgress = UniversalStudentProgress;
    window.ensureQuestionsLoad = ensureQuestionsLoad;
    window.initializeUniversalListening = initializeUniversalListening;
    
    // Fun√ß√£o de debug global
    window.debugListening = function() {
        console.log('üîç SISTEMA UNIVERSAL DEBUG:');
        
        if (window.studentProgress) {
            console.log('‚úÖ Sistema ativo');
            return window.studentProgress.debugProgress();
        } else {
            console.error('‚ùå Sistema n√£o inicializado!');
            
            console.log('üîç Verificando quest√µes globais:');
            ['foundationLessons', 'beginnerLessons', 'intermediateLessons', 'advancedLessons'].forEach(varName => {
                console.log(`${varName}:`, window[varName] ? '‚úÖ' : '‚ùå');
            });
            
            return null;
        }
    };
    
    // Fun√ß√£o para for√ßar re-inicializa√ß√£o
    window.retryListeningSystem = function() {
        console.log('üîÑ For√ßando re-inicializa√ß√£o...');
        smartAutoStart();
    };
    
    // ===== CSS para anima√ß√µes =====
    const style = document.createElement('style');
    style.textContent = `
        @keyframes badgeShow {
            0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
            20% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
            80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
            100% { opacity: 0; transform: translate(-50%, -50%) scale(0.9); }
        }
    `;
    document.head.appendChild(style);
    
    // ===== üîß INICIAR AUTOMATICAMENTE - MELHORADO =====
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            console.log('üìÑ DOM carregado, aguardando scripts...');
            setTimeout(smartAutoStart, 100); // Pequeno delay para garantir carregamento
        });
    } else {
        console.log('üìÑ DOM j√° pronto, iniciando...');
        setTimeout(smartAutoStart, 100);
    }
    
    console.log('üéì Universal Listening System v2.0 carregado!');
    console.log('üîß Sistema de retry inteligente ativo');
    console.log('üíæ Sistema de progresso unificado');
    console.log('üéØ Debug: use debugListening() no console');
    console.log('üîÑ Retry manual: use retryListeningSystem() no console');
    
})();
